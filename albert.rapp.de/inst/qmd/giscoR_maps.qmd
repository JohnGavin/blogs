---
# params => !expr only
#   !expr then single YAML 'flow scalar'
#   https://yaml.org/spec/1.2.2/#73-flow-scalar-styles
# metadata (e.g. title) => 'r ...' (backquote)
#   https://github.com/quarto-dev/quarto-cli/discussions/6262#discussioncomment-6472891
#   https://github.com/quarto-dev/quarto-cli/discussions/606#discussioncomment-2553877
params:
  subtitle: "Report for 
  {{< meta params.country >}} fails /
  {{< meta params.p_list >}} fails /
  {{< meta params.source_url >}} works /
  {{< meta title >}} works /
  {{< meta date >}} works /"
  # https://quarto.org/docs/computations/r.html#chunk-options
  p_list: list("A", "B") # not !expr, parse eval in doc
  country: !expr c('Ireland', 'Germany')[2]
  source_url: "https://albert-rapp.de/posts/ggplot2-tips/28_maps/28_maps.html"
  author: "asdf"
date: today
title: "Country: `r params$country`"
subtitle: "`r params$subtitle`"
format: html
---

```{r p_load}
# pak::pak('giscoR')
pkgs_new <- c(
  # giscoR needs sf - sf fails for libproj & sqlite3
  "giscoR", "sf", "ggiraph",
  "dplyr", "glue", "stringr", # "tidyverse", 
   # ::
  "janitor", 'here', "quarto", "htmltools", "rmarkdown"
)
pkgs_new |> sapply(library, char = T) |> invisible()
# pacman::p_load(pkgs_new)
```
```{r quarto_render, eval = FALSE}
quarto::quarto_render(
  input = here::here("giscoR_maps"), 
  # dir to render
  # output dir set in _quarto.yml
  output_format = "html", 
  cache_refresh = TRUE, 
  execute_params = list(pcn = 0.2))
```

# Data

```{r gisco_get_nuts}
#| echo: false
germany_districts <- 
  gisco_get_nuts(
    year = "2021", 
    # one nuts level of '0','1','2','3','all'  
    nuts_level = c('0','1','2','3','all')[5],
    epsg = 3035,
    country = params$country
  ) |> 
  # Nicer output
  as_tibble() |> 
  janitor::clean_names()
```


```{r ggplot}
#| echo: false
germany_districts |> glimpse()
germany_districts |> 
  ggplot(aes(geometry = geometry)) +
  geom_sf()
```

## add state borders
```{r nuts_level_1}
#| echo: false
germany_states <- gisco_get_nuts(
  year = "2021", 
  nuts_level = 1,
  epsg = 3035,
  country = params$country
) |> 
  as_tibble() |> 
  janitor::clean_names()
germany_states
```
```{r ggplot geom_sf}
germany_districts |> 
  ggplot(aes(geometry = geometry)) +
  geom_sf(
    data = germany_states,
    aes(fill = nuts_name),
    color = 'black',
    linewidth = 0.5
  ) +
  geom_sf()
```
```{r color black}
germany_districts |> 
  ggplot(aes(geometry = geometry)) +
  geom_sf(
    data = germany_states,
    aes(fill = nuts_name),
    color = 'black',
    linewidth = 0.5
  ) +
  geom_sf(
    fill = NA,
    color = 'black',
    linewidth = 0.1
  )
```

# interactive chart
+ https://albert-rapp.de/posts/ggplot2-tips/28_maps/28_maps.html#step-3-make-the-chart-interactive
```{r}
gg_plt <- germany_districts |> 
  ggplot(aes(geometry = geometry)) +
  geom_sf(
    data = germany_states,
    aes(fill = nuts_name),
    color = 'black',
    linewidth = 0.5
  ) +
  # make geom_sf() layer for districts interactive 
  #   via geom_sf_interactive() 
  geom_sf_interactive(
    fill = NA, 
    aes(
      data_id = nuts_id,
      tooltip = glue::glue('{nuts_name}')
    ),
    linewidth = 0.1
  )
# render chart with girafe() function.
girafe(ggobj = gg_plt)
```

# merge state and district-level data
+ tooltip shows state name + district name
```{r}
gg_plt <- germany_districts |> 
  ggplot(aes(geometry = geometry)) +
  geom_sf(
    data = germany_states,
    aes(fill = nuts_name),
    color = 'black',
    linewidth = 0.5
  ) +
  geom_sf_interactive(
    fill = NA, 
    aes(
      data_id = nuts_id,
      tooltip = glue::glue('{nuts_name}')
    ),
    linewidth = 0.1
  ) +
  theme_void() +
  theme(
    legend.position = 'none'
  )
girafe(ggobj = gg_plt)
```

## Merge geographic data
+ merge the state- and district-level data
+ use spatial calculations to figure out which district geometry is contained within a state geometry
+ sf::st_within() 
  - iterating over district geometries 
  - check if each within a state geometry
  - which state each district belongs to?
```{r map_dbl map_lgl}
germany_districts$geometry |> str()
state_nmbrs <- map_dbl(
  germany_districts$geometry[-1],
  \(x) {
    map_lgl(
      germany_states$geometry,
      \(y) st_within(x, y) |> 
        as.logical()
    ) |> which()
  }
)
state_nmbrs <- c(1, state_nmbrs)
```
```{r germany_districts_w_state}
germany_districts_w_state <- germany_districts |> 
  mutate(
    state = germany_states$nuts_name[state_nmbrs]
  )
germany_districts_w_state |> select(nuts_name, state)
```
```{r geom_sf_interactive}
gg_plt <- germany_districts_w_state |> 
  ggplot(aes(geometry = geometry)) +
  geom_sf(
    data = germany_states,
    aes(fill = nuts_name),
    color = 'black',
    linewidth = 0.5
  ) +
  # different tooltip in the geom_sf_interactive
  geom_sf_interactive(
    fill = NA, 
    aes(
      data_id = nuts_id,
      tooltip = glue::glue('{nuts_name}<br>{state}')
    ),
    linewidth = 0.1
  ) +
  theme_void() +
  theme(legend.position = 'none')
girafe(ggobj = gg_plt)
```

## nice text labels
```{r}
make_nice_label <- function(nuts_name, state) {
  # wrap texts in HTML <span> tags 
  nuts_name_label <- htmltools::span(
    nuts_name,
    # apply CSS to make them look nice
    style = htmltools::css(
      fontweight = 600,
      font_family = 'Source Sans Pro',
      font_size = '32px'
    )
  )
  state_label <- htmltools::span(
    state,
    # apply CSS to make them look nice
    style = htmltools::css(
      font_family = 'Source Sans Pro',
      font_size = '20px'
    )
  )
  # <br> not \n in glue
  glue::glue('{nuts_name_label}<br>{state_label}')
}

germany_districts_w_state_and_labels <- germany_districts_w_state  |> 
  mutate(
    nice_label = map2_chr(
      nuts_name,
      state,
      make_nice_label
    )
  )

```
+ replace tooltip aesthetic in geom_sf_interactive() layer with nice_label column
```{r}
ggplt <- germany_districts_w_state_and_labels  |> 
  ggplot(aes(geometry = geometry)) +
  geom_sf(
    data = germany_states,
    aes(fill = nuts_name),
    color = 'black',
    linewidth = 0.5
  ) +
  geom_sf_interactive(
    fill = NA, 
    aes(
      data_id = nuts_id,
      tooltip = nice_label
    ),
    linewidth = 0.1
  ) +
  geom_sf(
    data = germany_states,
    aes(fill = nuts_name),
    color = 'black',
    linewidth = 0.5
  ) +
  geom_sf_interactive(
    fill = NA, 
    aes(
      data_id = nuts_id,
      tooltip = nice_label
    ),
    linewidth = 0.1
  ) +
  theme_void() +
  theme(
    legend.position = 'none'
  ) +
  scale_fill_manual(
    values = c("#A0CBE8FF", "#F28E2BFF", "#FFBE7DFF", "#59A14FFF", "#8CD17DFF", "#B6992DFF", "#F1CE63FF", "#499894FF", "#86BCB6FF", "#E15759FF", "#FF9D9AFF", "#79706EFF", "#BAB0ACFF", "#D37295FF", "#FABFD2FF", "#B07AA1FF", "#D4A6C8FF", "#9D7660FF", "#D7B5A6FF")
  )
girafe(ggobj = ggplt)
```
```{r}
girafe(
  ggobj = ggplt,
  options = list(
    opts_hover(
      css = girafe_css(
        css = '',
        # Just turn the hover area black
        area = 'stroke: black; fill: black;'
      )
    )
  )
)

```

::: footer
<!-- &copy; 
-->
`r rmarkdown::metadata$params$author` works | 
`r rmarkdown::metadata$params$country` works |
`r rmarkdown::metadata$title` fails |
`r rmarkdown::metadata$date` works
:::




# Appendix
## params
```{r params}
params
glue("{{< meta title >}}") # FAILS
# parse/eval p_list string into code inside R chunk
#   OR !expr in yaml to parse/eval string see params$country
eval(parse(text = params$p_list))
```
Params: `r params$country`
