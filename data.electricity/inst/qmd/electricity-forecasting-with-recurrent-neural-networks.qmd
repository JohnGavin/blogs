---
params:
  lookback: 1440 # Obs go back 10 days
  steps: 6 # Obs sampled one data point per hour
  delay: 144 # Targets 24 hours in the future
  data_dir: "~/Downloads/jena_climate"
  source_url: "https://blogs.rstudio.com/ai/posts/2017-12-20-time-series-forecasting-with-recurrent-neural-networks/"
  title: "Electricity forecasting via recurrent neural networks"
title: "`r params$title`"
date: today
subtitle: "`r params$source_url |> basename()"
format: html
---



# Data
+ TODO: pin an aws csv.zip file 
```{r download.file}
dir.create("~/Downloads/jena_climate", recursive = TRUE)
download.file(
  "https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip",
  "~/Downloads/jena_climate/jena_climate_2009_2016.csv.zip"
)
unzip(
  "~/Downloads/jena_climate/jena_climate_2009_2016.csv.zip",
  exdir = params$data_dir
)

```

```{r read_csv}
library(tibble)
library(readr)

fname <- file.path(params$data_dir, 
  "jena_climate_2009_2016.csv")

data <- read_csv(fname, show_col_types = FALSE)
glimpse(data)
```

# EDA
## temperature
+ yearly periodicity
```{r temperature all}
library(ggplot2)
ggplot(data, aes(x = 1:nrow(data), y = `T (degC)`)) + geom_line()
```

##  temperature - first 10 days
+ temperature - first 10 days
+ daily periodicity
```{r temperature - first 10 days}
ggplot(data[1:1440,], aes(x = 1:1440, y = `T (degC)`)) + geom_line()
```

# Model
+ `lookback` timesteps
  + timestep is 10 minutes
  + `lookback` = `r params$lookback` 
    — Observations will go back 10 days.
+ sampled every `steps` timesteps
  + `steps` = `r params$steps`
  — Observations sampled at one data point per hour.
+ predict the temperature in `delay` timesteps
  + `delay` = `r params$delay`
  — Targets will be 24 hours in the future.

## neural network ingestion
+ already numerical, so no need for vectorization
+ different scales
  + temperature (C) between -20 and +30
  + atmospheric pressure (mbar) is ~1,000
  + normalize each series _independently_!
  
+ generator function 
  + input current array of float data 
  + output batches of data from 
    + recent past
    + target temperature in future
  + samples redundant
    + sample N and sample N + 1 have most timesteps in common
    + generate samples on the fly, from original data
  + maintain internal state
    + constructed by calling another yet another function
      + returns the generator function
      + environment of the function 
        + which returns the generator 
        + is used to track state

```{r overwrite data}
data <- data.matrix(data[,-1])
```
```{r scale}
train_data <- data[1:200000,]
mean <- apply(train_data, 2, mean)
std <- apply(train_data, 2, sd)
data <- scale(data, center = mean, scale = std)
```

## data generator
+ yields a list (samples, targets), 
  + samples is one batch of input data 
  + targets is corresponding array of target temperatures


<!-- #| @data original array of floating-point data, which you normalized in listing 6.32. -->
<!-- #| @lookback — How many timesteps back the input data should go. -->
<!-- #| @delay — How many timesteps in the future the target should be. -->
<!-- #| @min_index and max_index — Indices in the data array that delimit which timesteps to draw from. This is useful for keeping a segment of the data for validation and another for testing. -->
<!-- #| @shuffle — Whether to shuffle the samples or draw them in chronological order. -->
<!-- #| @batch_size — The number of samples per batch. -->
<!-- #| @step — The period, in timesteps, at which you sample data. You’ll set it 6 in order to draw one data point every hour -->

```{r generator}
generator <- function(
    data, lookback, delay, min_index, max_index,
    shuffle = FALSE, batch_size = 128, step = 6) {
  if (is.null(max_index))
    max_index <- nrow(data) - delay - 1
  i <- min_index + lookback
  function() {
    if (shuffle) {
      rows <- sample(c((min_index+lookback):max_index), size = batch_size)
    } else {
      if (i + batch_size >= max_index)
        i <<- min_index + lookback
      rows <- c(i:min(i+batch_size-1, max_index))
      i <<- i + length(rows)
    }

    samples <- array(0, dim = c(length(rows),
                                lookback / step,
                                dim(data)[[-1]]))
    targets <- array(0, dim = c(length(rows)))
                      
    for (j in 1:length(rows)) {
      indices <- seq(rows[[j]] - lookback, rows[[j]]-1,
                     length.out = dim(samples)[[2]])
      samples[j,,] <- data[indices,]
      targets[[j]] <- data[rows[[j]] + delay,2]
    }           
    list(samples, targets)
  }
}
```

+ instantiate three generators: one for training, one for validation, and one for testing.
```{r training validation testing}
lookback <- 1440
step <- 6
delay <- 144
batch_size <- 128

train_gen <- generator(
  data,
  lookback = lookback,
  delay = delay,
  min_index = 1,
  max_index = 200000,
  shuffle = TRUE,
  step = step, 
  batch_size = batch_size
)

val_gen = generator(
  data,
  lookback = lookback,
  delay = delay,
  min_index = 200001,
  max_index = 300000,
  step = step,
  batch_size = batch_size
)

test_gen <- generator(
  data,
  lookback = lookback,
  delay = delay,
  min_index = 300001,
  max_index = NULL,
  step = step,
  batch_size = batch_size
)

# How many steps to draw from val_gen in order to see the entire validation set
val_steps <- (300000 - 200001 - lookback) / batch_size

# How many steps to draw from test_gen in order to see the entire test set
test_steps <- (nrow(data) - 300001 - lookback) / batch_size

```

## baseline
+ https://cran.r-project.org/web/packages/keras3/vignettes/getting_started.html
```{r keras}
if (!requireNamespace("keras"))
  remotes::install_github("rstudio/keras")
library(keras)
# keras::install_keras(), which installs TensorFlow
keras::install_keras(backend = "tensorflow")
```


```{r tensorflow, eval = FALSE}
# https://tensorflow.rstudio.com/install/
if (!requireNamespace("tensorflow"))
  remotes::install_github("rstudio/tensorflow")
if (!reticulate::py_available())
  reticulate::install_python()
library(tensorflow)
install_tensorflow(envname = "r-tensorflow2")
```

```{r CPU, eval = FALSE}
x <- array(runif(64*64), c(1, 64, 64))
# keras::layer_random_rotation(x, .5)  # Error:
# No registered 'RngReadAndSkip' OpKernel for 'GPU' devices
# Pin the operation to the CPU to avoid the error
with(tf$device("CPU"), keras::layer_random_rotation(x, .5) ) # No Error

evaluate_naive_method <- function() {
  batch_maes <- c()
  for (step in 1:val_steps) {
    c(samples, targets) %<-% val_gen()
    preds <- samples[,dim(samples)[[2]],2]
    mae <- mean(abs(preds - targets))
    batch_maes <- c(batch_maes, mae)
  }
  print(mean(batch_maes))
}

evaluate_naive_method()
(celsius_mae <- 0.29 * std[[2]])
```
## base ML approach
```{r base ML approach}
library(tictoc)
tic("base ML approach")
model <- keras_model_sequential() %>% 
  layer_flatten(input_shape = c(lookback / step, dim(data)[-1])) %>% 
  layer_dense(units = 32, activation = "relu") %>% 
  layer_dense(units = 1)

model %>% compile(
  optimizer = optimizer_rmsprop(),
  loss = "mae"
)

history <- 
  model %>% 
  fit_generator(
    train_gen,
    steps_per_epoch = 500,
    epochs = 20,
    validation_data = val_gen,
    validation_steps = val_steps
  )
toc()
```

## first recurrent baseline
```{r first recurrent baseline}
library(tictoc)
tic("first recurrent baseline")
model <- keras_model_sequential() %>% 
  layer_gru(units = 32, input_shape = list(NULL, dim(data)[[-1]])) %>% 
  layer_dense(units = 1)

model %>% compile(
  optimizer = optimizer_rmsprop(),
  loss = "mae"
)

history <- model %>% fit_generator(
  train_gen,
  steps_per_epoch = 500,
  epochs = 20,
  validation_data = val_gen,
  validation_steps = val_steps
)

```

## Stacking recurrent layers
```{r Stacking recurrent layers}
tic("Stacking recurrent layers")
model <- keras_model_sequential() %>% 
  layer_gru(units = 32, dropout = 0.2, recurrent_dropout = 0.2,
            input_shape = list(NULL, dim(data)[[-1]])) %>% 
  layer_dense(units = 1)

model %>% compile(
  optimizer = optimizer_rmsprop(),
  loss = "mae"
)

history <- model %>% fit_generator(
  train_gen,
  steps_per_epoch = 500,
  epochs = 40,
  validation_data = val_gen,
  validation_steps = val_steps
)
toc()
```

## [recurrent dropout to fight overfitting](https://blogs.rstudio.com/ai/posts/2017-12-20-time-series-forecasting-with-recurrent-neural-networks/#stacking-recurrent-layers)
```{r recurrent dropout to fight overfitting}
tic("recurrent dropout to fight overfitting")
model <- keras_model_sequential() %>% 
  layer_gru(units = 32, 
            dropout = 0.1, 
            recurrent_dropout = 0.5,
            return_sequences = TRUE,
            input_shape = list(NULL, dim(data)[[-1]])) %>% 
  layer_gru(units = 64, activation = "relu",
            dropout = 0.1,
            recurrent_dropout = 0.5) %>% 
  layer_dense(units = 1)

model %>% compile(
  optimizer = optimizer_rmsprop(),
  loss = "mae"
)

history <- model %>% fit_generator(
  train_gen,
  steps_per_epoch = 500,
  epochs = 40,
  validation_data = val_gen,
  validation_steps = val_steps
)
toc()
```


## bidirectional RNNs
```{r bidirectional RNNs}
tic("bidirectional RNNs}")
# Number of words to consider as features
max_features <- 10000  

# Cuts off texts after this number of words
maxlen <- 500

imdb <- dataset_imdb(num_words = max_features)
c(c(x_train, y_train), c(x_test, y_test)) %<-% imdb

# Reverses sequences
x_train <- lapply(x_train, rev)
x_test <- lapply(x_test, rev) 

# Pads sequences
x_train <- pad_sequences(x_train, maxlen = maxlen)  <4>
x_test <- pad_sequences(x_test, maxlen = maxlen)

model <- keras_model_sequential() %>% 
  layer_embedding(input_dim = max_features, output_dim = 128) %>% 
  layer_lstm(units = 32) %>% 
  layer_dense(units = 1, activation = "sigmoid")

model %>% compile(
  optimizer = "rmsprop",
  loss = "binary_crossentropy",
  metrics = c("acc")
)
  
history <- model %>% fit(
  x_train, y_train,
  epochs = 10,
  batch_size = 128,
  validation_split = 0.2
)
toc()
```

```{r bidirectional RNN in keras}
tic("bidirectional RNNs in keras")
model <- keras_model_sequential() %>% 
  layer_embedding(input_dim = max_features, output_dim = 32) %>% 
  bidirectional(
    layer_lstm(units = 32)
  ) %>% 
  layer_dense(units = 1, activation = "sigmoid")

model %>% compile(
  optimizer = "rmsprop",
  loss = "binary_crossentropy",
  metrics = c("acc")
)

history <- model %>% fit(
  x_train, y_train,
  epochs = 10,
  batch_size = 128,
  validation_split = 0.2
)
toc()
```

## temperature prediction task
```{r temperature prediction task}
tic("bidirectional RNNs")
model <- keras_model_sequential() %>% 
  bidirectional(
    layer_gru(units = 32), input_shape = list(NULL, dim(data)[[-1]])
  ) %>% 
  layer_dense(units = 1)

model %>% compile(
  optimizer = optimizer_rmsprop(),
  loss = "mae"
)

history <- model %>% fit_generator(
  train_gen,
  steps_per_epoch = 500,
  epochs = 40,
  validation_data = val_gen,
  validation_steps = val_steps
)
toc()
```

# Links
+ [Investigating the Power of LSTM-Based Models in Solar Energy Forecasting
](https://www.mdpi.com/2227-9717/11/5/1382)
