---
# install quarto-web from project's here() 
#   quarto add coatless/quarto-web # -> Terminal
#   quarto add --no-prompt coatless/quarto-webr
#   quarto add --no-prompt coatless-quarto/pyodide
# https://quarto-webr.thecoatlessprofessor.com/
#   https://quarto-webr.thecoatlessprofessor.com/examples/readme/
#   https://github.com/coatless/quarto-webr/tree/main
#   https://quarto.org/docs/extensions/
#webr
# reads data from ./inst/extdata/data_raw
# 
# TODO: pass params into sql and capture output
# 
params:
  pkgs:
    - "readr"
    - "arrow"
    - "dplyr"
    - "arrow"
    - "duckdb"
    - "glue"
    - "here"
    # - "ggplot2"
    # - "igraph"    
format: 
  html:
    resources:
      - data/
      #- data/*.parquet
execute:
  cache: true
  echo: true
  error: true
  message: false
  warning: false
  fig-align: center
  fig-width: 12
  fig-height: 8
  editor_options: 
    chunk_output_type: inline
    code-overflow: wrap
    code-fold: true
    code-tools: true
engine: knitr
filters:
  - "webr"
title: duckdb, webR virt file sys
output: 
  html_document:
    number_sections: true
# CRAN packages installed when page opened
webr:
  # https://quarto-webr.thecoatlessprofessor.com/qwebr-meta-options.html#show-header-message
  show-header-message: true
  # https://quarto-webr.thecoatlessprofessor.com/demos/qwebr-feature-demos.html
  cell-options:
    out-width: "100%"
    autorun: true   # display results as doc first loads
    # context how the cell should operate on the page
    # https://quarto-webr.thecoatlessprofessor.com/qwebr-cell-options.html#run-options
    # https://quarto-webr.thecoatlessprofessor.com/demos/qwebr-global-cell-defaults.html#cell-options-document-key
    context: "interactive" # setup (used by later cells) interactive output (no code shown)
    read-only: false
    results: asis # markup
  # https://quarto-webr.thecoatlessprofessor.com/qwebr-meta-options.html#autoload-packages
  packages: "`r params$pkgs`"
---

<!---
enclose ALL chunks with {webr-r} - not {r}
then play each in webpage sequentially
else {r} runs _locally only_

https://quarto-webr.thecoatlessprofessor.com/examples/revealjs/#/embedded-slides
--->

## read usa parquets
### duckdb
## where to write usa output
```{webr where to read usa output}
# TODO: read from website URL?
list.files("/", all.files = T, full.names = T, 
  include.dirs = T, recursive = T,
  pattern = "parquet")
(fp <- here())
list.files(fp)
(usa_out <- paste0(
  "oil_", c("crude_usa", "oil_refined"), 
  c(".parquet", ".csv")[1]
))
```
```{webr, output = "abc"}
fp_usa <- here(usa_out[1])
# https://duckdb.org/docs/data/parquet/overview.html
sql <- "DESCRIBE SELECT * FROM '?fp_usa';"
library(duckdb)
(cnx <- dbConnect(duckdb()))
dbGetQuery(cnx, sql)
```

### arrow
```{webr read usa parquets}

get_prqt_dat <- function(fn, fp){
  fp %>% 
  here(fn) %>% 
  arrow::read_parquet() %>%
  mutate_if(is.character, as.factor) 
}
fp <- here() # "data"
list.files(fp)
prqt_us <- fp_usa |> 
  sapply(arrow::read_parquet)
names(prqt_us) <- c("oil_crude", "oil_refined")
prqt_us |> lapply(glimpse) |> invisible()
```
<!--
```{r read usa csvs}
csv_us <- fns |> sapply(get_csv_dat, fp)
names(csv_us) <- c("oil_crude", "oil_refined")
csv_us |> str()
```
-->

:::{.panel-tabset}

## 1. parquet -> duckdb

```{webr-r}
# TODO: pin(url)
#| label: duckdb
(cnx <- dbConnect(duckdb()))
```


## 2. `CREATE VIEW`
+ download local copy of french baby names
+ create a duckdb view
```{webr-r}
#| label: create view
destfile_str <- 'fp_usa'
fp_usa |> 
  sapply(dir) 

dbSendQuery(cnx, glue("
  CREATE VIEW oil_refined AS
    SELECT * 
    FROM '{destfile_str}'
    WHERE annais <> 'XXXX'"))
rm(destfile_str)
```



:::

# Top-level page 2

:::{.panel-tabset}

## 1. dbGetQuery 
+ test queries
```{webr-r}
# DESCRIBE
dbGetQuery(cnx, "
  DESCRIBE prenoms")
# COUNT
dbGetQuery(cnx,"
  SELECT COUNT(*)
  FROM prenoms")
# MIN/MAX
dbGetQuery(cnx,"
  SELECT MIN(annais), MAX(annais)
  FROM prenoms")
```

## 2. dbGetQuery -> `INNER JOIN`
```{webr-r}
top_2022 <- dbGetQuery(cnx, 
  "
  WITH top AS (
    SELECT preusuel
    FROM prenoms
    WHERE annais = '2022'
      AND preusuel <> '_PRENOMS_RARES'
    ORDER BY nombre DESC
    LIMIT 9
  )
  SELECT 
    p.preusuel,
    p.annais,
    p.nombre
  FROM prenoms p
  INNER JOIN top ON p.preusuel = top.preusuel
  "
)
```

## 3. ggplot

```{webr-r}
#| fig-cap: |
#|   In our model of the data science process, you start with data import
#| fig-alt: |
#|   A diagram displaying the data science cycle: Import -> Tidy -> Understand 
#| context: output
#| fig-width: 5
#| fig-height: 3
#| out-width/out-height physical space units
#| out-width: 500px
top_2022 |> 
  mutate(annais = as.integer(annais)) |> 
  filter(nombre > 100) |> 
  ggplot(aes(annais, nombre, color = preusuel)) +
    geom_line(lwd = .8) +
    scale_color_okabe_ito() +
    labs(title = glue("2022 names"),
         subtitle = "Most popular in France",
         x = "year",
         y = bquote(N[birth]),
         color = "names",
         caption = glue("données INSEE (icem7) https://www.data.gouv.fr/fr/datasets/base-prenoms-insee-format-parquet/
                        https://r.iresmi.net/ {Sys.time()}")) +
    theme_minimal() +
    theme(plot.caption = element_text(size = 6),
          plot.background = element_rect(fill = "white"))
```

:::

# Notes
+ [r.iresmi.net](https://r.iresmi.net/posts/2024/webr/index.html)
  + [jamesgoldie.dev](https://jamesgoldie.dev/writing/your-new-r-package-webr/)
  + [www.rostrum.blog](https://www.rostrum.blog/posts/2024-01-20-webr-remote/)
  + https://webr.r-wasm.org/latest/

+ [Ref](https://github.com/coatless/quarto-webr)
+ install an R-Universe package
  + => install its dependencies manually
  + e.g. add 
  [`crayon`](https://github.com/r-lib/crayon)
  to yaml 
  [`webr.packages`](https://docs.r-wasm.org/webr/latest/packages.html)
    + [`crayon`](https://github.com/r-lib/crayon)
    a dependency of 
    [`collateral`](https://github.com/jimjam-slam/collateral)



:::{.callout-note collapse="true"}
## base plot
+ basic example with base R plotting
+ install ggplot2
```{webr-r}
#| label: base plot
plot(sin, -pi, 2 * pi)
```
:::

```{webr, warning=FALSE}
# NB: Create R objects while loading in here!
#| context: setup # v interactive
#| read-only: true
#| label: webr::install igraph
# webr filter cosmetic warning re language engine ‘webr’ #| warning: FALSE # no get_engine(options$engine)  warning
# hidden code chunk
# installs WebR-ready version from R-universe
# when the page loads => context setup

# use yaml header to install at startup
# webr::install("igraph", repos = "https://igraph.r-universe.dev")
# pacman::p_load(tidyverse, here)
```
```{webr, warning=FALSE}
#| warning: FALSE
# context: setup
# Install the binary from a custom repository
webr::install(
  "demorwasmbinary", 
  repos = "https://tutorials.thecoatlessprofessor.com/webr-unified-gh-workflow/"
)
library("demorwasmbinary")
```
```{webr}
# Check to see if the function works
demorwasmbinary::in_webr()
# View help documentation
?demorwasmbinary::in_webr
```

# Appendix - data setup

<!-- 
https://quarto.org/docs/authoring/includes.html 
https://stackoverflow.com/questions/75620644/how-to-include-r-snippet-code-from-external-file-into-quarto-document
1/3)  #| eval: true 
      #| file: create_dataframe.R
2/3)  ```{r,file = "Chu1.R"}
3/3)  #| echo: false
      source("Chu1.R")
-->

<!-- https://quarto.org/docs/authoring/includes.html -->
<!-- include by themselves on a line -->
<!-- include surrounded by empty lines -->
<!-- relative refs in include based on dir of main qmd, not included qmd -->
<!-- metadata blocks in include file => unexpected behavior -->

{{< include _webR_duckdb_01_r.qmd >}}
